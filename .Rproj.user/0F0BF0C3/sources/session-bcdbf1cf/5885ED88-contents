#### Violence and coercive policing

library(tidyverse)
library(MplusAutomation)
library(lme4)
library(sjstats)
library(MASS)
library(texreg)
library(lavaan)
library(estimatr)
library(ltm)
options(scipen=999)


######################################################

# Read data
load('data/dflong_new.Rdata')

# Cleaning data
dflong <- 
  dflong %>%
  mutate(vio = vio1 + vio2 + vio3 + vio4 + vio5 + vio6,
         gunall = gun == T,
         class = as.numeric(class),
         toppol = factor(toppol, levels = c("Consent", "Protest", "Rejection", "Coercion")),
         newid = as.factor(row.names(dflong))) %>%
  mutate(gunall = replace_na(gunall, 0))


####################################################
# Measuring latent variables

irt_und <- 
  dflong %>%
  dplyr::select(und1, und2, und3) %>%
  grm()
irt_und_scores <- factor.scores.grm(irt_und, resp.patterns = dflong %>% dplyr::select(und1, und2, und3))

irt_pj <- 
  dflong %>%
  dplyr::select(pj1, pj2, pj3, pj4) %>%
  grm()
irt_pj_scores <- factor.scores.grm(irt_pj, resp.patterns = dflong %>% dplyr::select(pj1, pj2, pj3, pj4))

irt_eff <- 
  dflong %>%
  dplyr::select(eff1, eff2, eff3, eff4, eff5, eff6) %>%
  grm()
irt_eff_scores <- factor.scores.grm(irt_eff, resp.patterns = dflong %>% dplyr::select(eff1, eff2, eff3, eff4, eff5, eff6))

irt_ovp <- 
  dflong %>%
  dplyr::select(ovp1, ovp2) %>%
  grm()
irt_ovp_scores <- factor.scores.grm(irt_ovp, resp.patterns = dflong %>% dplyr::select(ovp1, ovp2))

dflong <-
  dflong %>%
  mutate(ovp = irt_ovp_scores$score.dat$z1,
         und = -irt_und_scores$score.dat$z1,
         pj = irt_pj_scores$score.dat$z1,
         eff = irt_eff_scores$score.dat$z1)

dflong %>% dplyr::select(ovp, und, pj, eff) %>% cor(use = 'complete.obs')


### Measuring police legitimacy

# 1) Export data to Mplus
dflong %>%
  dplyr::select(newid, napol1, napol2, fearpolgen, fearpolper, toppol) %>%
  prepareMplusData(filename = 'data/police_legitimacy.dat')

# 2) Run IRT model on Mplus

# 3) Save IRT scores from Mplus

dflong <-
  dflong %>%
  left_join(read.table('data/continuum_long.txt') %>%
              rename('newid' = 'V4',
                     'legitimacy' = 'V5') %>%
              dplyr::select(newid, legitimacy) %>%
              mutate(newid = as.factor(newid)),
            by = 'newid')
save(dflong, file = 'data/dflong_legitimacy.RData')

# Correlation matrices between latent constructs by wave
cor_constucts_1 <- dflong %>% filter(wave == 1) %>% dplyr::select(ovp, und, pj, eff, legitimacy) %>% cor(use = 'complete.obs')
cor_constucts_2 <- dflong %>% filter(wave == 2) %>% dplyr::select(ovp, und, pj, eff, legitimacy) %>% cor(use = 'complete.obs')
cor_constucts_3 <- dflong %>% filter(wave == 3) %>% dplyr::select(ovp, und, pj, eff, legitimacy) %>% cor(use = 'complete.obs')


###################################################

# Table 1
dflong %>%
  group_by(wave) %>%
  summarise(ovp_abovelaw = mean(ovp1, na.rm = T),
            ovp_harass = mean(ovp2, na.rm = T),
            und_mysafety = mean(und3, na.rm = T),
            und_quant = mean(und1, na.rm = T),
            und_neighsafe = mean(und2, na.rm = T),
            napol = mean(napol1, na.rm = T),
            fear = mean(fearpolgen, na.rm = T),
            duty = mean(dutypol, na.rm = T),
            norm = mean(polcons, na.rm = T),
            coer = mean(polcoer, na.rm = T),
            disob = mean(polprot, na.rm = T),
            rej = mean(polrej, na.rm = T),
            vio1 = mean(vio1, na.rm = T),
            vio2 = mean(vio2, na.rm = T),
            vio3 = mean(vio3, na.rm = T),
            vio4 = mean(vio4, na.rm = T),
            vio5 = mean(vio5, na.rm = T),
            vio6 = mean(vio6, na.rm = T),
            eff1 = mean(eff1, na.rm = T),
            eff2 = mean(eff2, na.rm = T),
            eff3 = mean(eff3, na.rm = T),
            eff4 = mean(eff4, na.rm = T),
            eff5 = mean(eff5, na.rm = T),
            eff6 = mean(eff6, na.rm = T),
            pj1 = mean(pj1, na.rm = T),
            pj2 = mean(pj2, na.rm = T),
            pj3 = mean(pj3, na.rm = T),
            pj4 = mean(pj4, na.rm = T),
            stop = mean(stop, na.rm = T),
            gun = mean(gunall, na.rm = T),
            white = mean(white, na.rm = T),
            male = mean(male, na.rm = T),
            class = mean(class, na.rm = T)
  )


# Table 2
dflong %>%
  dplyr::select(quest, wave,
                white, class, male, area,
                ovp, und, stop, gun, age) %>%
  pivot_wider(id_cols = c('quest', 'white', 'class', 'male', 'area'),
              names_from = wave,
              values_from = c('ovp', 'und', 'stop', 'gun', 'age')) %>%
  mutate(youth = age_1 < 25,
         youth2 = age_1 < 30,
         youngmale = age_1 < 25 & male == T) %>%
  group_by(area) %>%
  summarise(
    white = mean(white, na.rm = T),
    class = mean(class, na.rm = T),
    ovp = mean(ovp_1, na.rm = T),
    und = mean(und_1, na.rm = T),
    stop = mean(stop_1, na.rm = T),
    gun = mean(gun_1, na.rm = T),
    young = mean(youth, na.rm = T),
    youngadults = mean(youth2, na.rm = T),
    youngmale = mean(youngmale, na.rm = T)
    )


###################################################

## FIRST PART: DYNAMICS OF THE OVERPOLICING-UNDERPOLICING PARADOX
# Cross-lagged panel model

dfwide_clpm <-
  dflong %>%
  dplyr::select(quest, wave,
                ovp, und, gunall, 
                white, male, class, area) %>%
  pivot_wider(id_cols = c('quest', 'white', 'male', 'class', 'area'),
              names_from = wave,
              values_from = c('ovp', 'und', 'gunall')) %>%
  mutate(area1 = area == 1,
         area2 = area == 2,
         area3 = area == 3,
         area4 = area == 4,
         area5 = area == 5,
         area6 = area == 6,
         area7 = area == 7,
         area8 = area == 8)

clpm <- '
                und_3 ~ F*und_2 + G*ovp_2 + gunall_3
                und_2 ~ F*und_1 + G*ovp_1 + gunall_2
                und_1 ~ gunall_1 + white + male + class + area1 + area3 + area4 + area5 + area6 + area7 + area8
                
                ovp_3 ~ H*ovp_2 + I*und_2 + gunall_3
                ovp_2 ~ H*ovp_1 + I*und_1 + gunall_2
                ovp_1 ~ gunall_1 + white + male + class + area1 + area3 + area4 + area5 + area6 + area7 + area8
                '
clpm.fit <- sem(clpm, std.lv = T, data = dfwide_clpm, missing = "ML", fixed.x = F, estimator = 'MLR')

# Table 3
summary(clpm.fit)
table3 <-
  summary(clpm.fit)[[1]] %>%
  dplyr::select(lhs, op, rhs, est, se) %>%
  mutate(ci_lo = round(est - 1.96 * se, 2),
         ci_up = round(est + 1.96 * se, 2))


####################################################
## SECOND PART: CONSEQUENCES OF THE OVERPOLICING-UNDERPOLICING PARADOX

## Association between overpolicing and underpolicing and police legitimacy

# Checking random intercepts and random coefficients models
ranint <- lmer(legitimacy ~ wave + (1 | quest), dflong, REML = F)
rancoe <- lmer(legitimacy ~ wave + (wave | quest), dflong, REML = F)
screenreg(list(ranint, rancoe))

dflong <- dflong %>% mutate(area = factor(area)) %>% mutate(area = relevel(area, ref = '2'))
hlm1a <- lmer(legitimacy ~ wave + ovp + (1 | quest), dflong, REML = F)
hlm1b <- lmer(legitimacy ~ wave + und + (1 | quest), dflong, REML = F)
hlm1c <- lmer(legitimacy ~ wave + ovp + und + (1 | quest), dflong, REML = F)
hlm1d <- lmer(legitimacy ~ wave + ovp + und + pj + eff + (1 | quest), dflong, REML = F)
hlm1e <- lmer(legitimacy ~ wave + ovp + und + pj + eff + white + male + class + factor(area) + 
                (1 | quest), dflong, REML = F)

# Table 4
list(
  'Model 1A' = hlm1a,
  'Model 1B' = hlm1b,
  'Model 1C' = hlm1c,
  'Model 1D' = hlm1d,
  'Model 1D' = hlm1e
) %>% screenreg(ci.force = T)


## Association between police legitimacy and tolerance of violence

# Model selection
var(dflong$vio) > mean(dflong$vio)
nb_intercept <- glmer.nb(vio ~ wave + (1 | quest), dflong)
nb_coef <- glmer.nb(vio ~ wave + (wave | quest), dflong)
screenreg(list(nb_intercept, nb_coef))

# Negative binomial models
nb.mD1 <- glmer.nb(vio ~ legitimacy + wave + (1 | quest), dflong)
nb.mD2 <- glmer.nb(vio ~ legitimacy + wave +  white + male + class + factor(area) + (1 | quest), dflong)
list(
  'Model A-D1' = nb.mD1,
  'Model A-D2' = nb.mD2
) %>% screenreg(ci.force = T)

## Longitudinal mediation model estimated on mplus

# Export data to mplus
dflong %>%
  dplyr::select(quest, wave, ovp, und, legitimacy, vio,
                vio1, vio2, vio3, vio4, vio6, vio6) %>%
  pivot_wider(id_cols = quest,
              names_from = wave,
              values_from = c('ovp', 'und', 'legitimacy', 'vio',
                              'vio1', 'vio2', 'vio3', 'vio4', 'vio6')) %>%
  prepareMplusData(filename = 'data/longitudinal_mediation.dat')


# Calculating 95% CIs for the mediation model (Table 5):
mediation_model <- data.frame(path = c('A1', 'A2', 'B', 'C', 'D1', 'D2', 'E', 'F1', 'F2', 'D1*E', 'D2*E'),
                              coef = c(0.795, 0.986, 0.239, 0.183, -0.119, -0.213, -0.059, 0.001, 0.014, 0.007, 0.013),
                              se = c(0.015, 0.004, 0.028, 0.022, 0.018, 0.017, 0.029, 0.031, 0.030, 0.004, 0.006)) %>%
  mutate(lowerbound = round(coef - 1.96 * se, 2),
         upperbound = round(coef + 1.96 * se, 2)) %>%
  print()


# Appendix: police legitmacy and tolerance of violence: breakdown
nb.vio1 <- glmer(vio1 ~ legitimacy + wave +  white + male + class + factor(area) + (1 | quest),
                 family = binomial(link = 'logit'), dflong)
nb.vio2 <- glmer(vio2 ~ legitimacy + wave +  white + male + class + factor(area) + (1 | quest),
                 family = binomial(link = 'logit'), dflong)
nb.vio3 <- glmer(vio3 ~ legitimacy + wave +  white + male + class + factor(area) + (1 | quest),
                 family = binomial(link = 'logit'), dflong)
nb.vio4 <- glmer(vio4 ~ legitimacy + wave +  white + male + class + factor(area) + (1 | quest),
                 family = binomial(link = 'logit'), dflong)
nb.vio5 <- glmer(vio5 ~ legitimacy + wave +  white + male + class + factor(area) + (1 | quest),
                 family = binomial(link = 'logit'), dflong)
nb.vio6 <- glmer(vio6 ~ legitimacy + wave +  white + male + class + factor(area) + (1 | quest),
                 family = binomial(link = 'logit'), dflong)
list(
  nb.vio1, nb.vio2, nb.vio3, nb.vio4, nb.vio5, nb.vio6
) %>% screenreg(ci.force = T)

######
# Mediation model

model.mediation.lavaan <- '
                          ovp_3 ~ A1*ovp_2
                          ovp_2 ~ A1*ovp_1
                          
                          und_3 ~ A2*und_2
                          und_2 ~ A2*und_1
                          
                          legitimacy_3 ~ B*legitimacy_2 + D1*ovp_2 + D2*und_2
                          legitimacy_2 ~ B*legitimacy_1 + D1*ovp_1 + D2*und_1
                          
                          vio_3 ~ C*vio_2 + E*legitimacy_2 + F1*ovp_1 + F2*und_1
                          vio_2 ~ C*vio_1 + E*legitimacy_1
                          
                          # Indirect effects
                          D1E := D1 * E
                          D23 := D2 * E
                          
                          Total_ovp := F1 + (D1*E)
                          Total_und := F2 + (D2*E)
                          '

dfwide_mediation <-
  dflong %>%
  dplyr::select(quest, wave,
                ovp, und, legitimacy, vio, 
                vio1, vio2, vio3, vio4, vio5, vio6,
                white, male, class, area) %>%
  pivot_wider(id_cols = c('quest', 'white', 'male', 'class', 'area'),
              names_from = wave,
              values_from = c('ovp', 'und', 'legitimacy', 'vio',
                              'vio1', 'vio2', 'vio3', 'vio4', 'vio5', 'vio6')) %>%
  mutate(area1 = area == 1,
         area2 = area == 2,
         area3 = area == 3,
         area4 = area == 4,
         area5 = area == 5,
         area6 = area == 6,
         area7 = area == 7,
         area8 = area == 8)

mediation.fit <- sem(model.mediation.lavaan, std.lv = T, data = dfwide_mediation, ordered = c('vio_2', 'vio_3'))
summary(mediation.fit)

mediation.fit_MLR <- sem(model.mediation.lavaan, std.lv = T, data = dfwide_mediation, estimator = 'MLR', missing = "ML", fixed.x = T)
summary(mediation.fit_MLR)

## With controls
model.mediation.lavaan_controls <- paste(
  model.mediation.lavaan,
  '
  ovp_1 ~ white + male + class + area1 + area3 + area4 + area5 + area6 + area7
  und_1 ~ white + male + class + area1 + area3 + area4 + area5 + area6 + area7
  legitimacy_1 ~ white + male + class + area1 + area3 + area4 + area5 + area6 + area7
  vio_1 ~ white + male + class + area1 + area3 + area4 + area5 + area6 + area7
  '
)

mediation.fit_controls <- sem(model.mediation.lavaan_controls, std.lv = T, data = dfwide_mediation, ordered = c('vio_1', 'vio_2', 'vio_3'))
summary(mediation.fit_controls)

mediation.fit.MLR_controls <- sem(model.mediation.lavaan_controls, std.lv = T, data = dfwide_mediation, estimator = 'MLR', missing = 'ML', fixed.x = T)
summary(mediation.fit.MLR_controls)


#####
# breakdown by violence
model.mediation.breakdown <- 
  '
  ovp_3 ~ A1*ovp_2
  ovp_2 ~ A1*ovp_1
  
  und_3 ~ A2*und_2
  und_2 ~ A2*und_1
  
  legitimacy_3 ~ B*legitimacy_2 + D1*ovp_2 + D2*und_2
  legitimacy_2 ~ B*legitimacy_1 + D1*ovp_1 + D2*und_1
  
  ovp_1 ~ white + male + class + area1 + area3 + area4 + area5 + area6 + area7
  und_1 ~ white + male + class + area1 + area3 + area4 + area5 + area6 + area7
  legitimacy_1 ~ white + male + class + area1 + area3 + area4 + area5 + area6 + area7
  
  # Indirect effects
  D1E := D1 * E
  D23 := D2 * E
  
  Total_ovp := F1 + (D1*E)
  Total_und := F2 + (D2*E)
  '

# First scenario
model.mediation.breakdown.vio1 <- paste(
  model.mediation.breakdown,
  '
  vio1_3 ~ C*vio1_2 + E*legitimacy_2 + F1*ovp_1 + F2*und_1
  vio1_2 ~ C*vio1_1 + E*legitimacy_1
  vio1_1 ~ white + male + class + area1 + area3 + area4 + area5 + area6 + area7
  '
)

# Second scenario
model.mediation.breakdown.vio2 <- paste(
  model.mediation.breakdown,
  '
  vio2_3 ~ C*vio2_2 + E*legitimacy_2 + F1*ovp_1 + F2*und_1
  vio2_2 ~ C*vio2_1 + E*legitimacy_1
  vio2_1 ~ white + male + class + area1 + area3 + area4 + area5 + area6 + area7
  '
)

# Third scenario
model.mediation.breakdown.vio3 <- paste(
  model.mediation.breakdown,
  '
  vio3_3 ~ C*vio3_2 + E*legitimacy_2 + F1*ovp_1 + F2*und_1
  vio3_2 ~ C*vio3_1 + E*legitimacy_1
  vio3_1 ~ white + male + class + area1 + area3 + area4 + area5 + area6 + area7
  '
)

# Fourth scenario
model.mediation.breakdown.vio4 <- paste(
  model.mediation.breakdown,
  '
  vio4_3 ~ C*vio4_2 + E*legitimacy_2 + F1*ovp_1 + F2*und_1
  vio4_2 ~ C*vio4_1 + E*legitimacy_1
  vio4_1 ~ white + male + class + area1 + area3 + area4 + area5 + area6 + area7
  '
)

# Fifth scenario
model.mediation.breakdown.vio5 <- paste(
  model.mediation.breakdown,
  '
  vio5_3 ~ C*vio5_2 + E*legitimacy_2 + F1*ovp_1 + F2*und_1
  vio5_2 ~ C*vio5_1 + E*legitimacy_1
  vio5_1 ~ white + male + class + area1 + area3 + area4 + area5 + area6 + area7
  '
)

# Sixth scenario
model.mediation.breakdown.vio6 <- paste(
  model.mediation.breakdown,
  '
  vio6_3 ~ C*vio6_2 + E*legitimacy_2 + F1*ovp_1 + F2*und_1
  vio6_2 ~ C*vio6_1 + E*legitimacy_1
  vio6_1 ~ white + male + class + area1 + area3 + area4 + area5 + area6 + area7
  '
)


model.mediation.breakdown.vio1.fit <- sem(model.mediation.breakdown.vio1, data = dfwide_mediation, std.lv = T, ordered = c('vio1_1', 'vio1_2', 'vio1_3'))
model.mediation.breakdown.vio2.fit <- sem(model.mediation.breakdown.vio2, data = dfwide_mediation, std.lv = T, ordered = c('vio2_1', 'vio2_2', 'vio2_3'))
model.mediation.breakdown.vio3.fit <- sem(model.mediation.breakdown.vio3, data = dfwide_mediation, std.lv = T, ordered = c('vio3_1', 'vio3_2', 'vio3_3'))
model.mediation.breakdown.vio4.fit <- sem(model.mediation.breakdown.vio4, data = dfwide_mediation, std.lv = T, ordered = c('vio4_1', 'vio4_2', 'vio4_3'))
model.mediation.breakdown.vio5.fit <- sem(model.mediation.breakdown.vio5, data = dfwide_mediation, std.lv = T, ordered = c('vio5_1', 'vio5_2', 'vio5_3'))
model.mediation.breakdown.vio6.fit <- sem(model.mediation.breakdown.vio6, data = dfwide_mediation, std.lv = T, ordered = c('vio6_1', 'vio6_2', 'vio6_3'))


model.mediation.breakdown.vio1.fit_MLR <- sem(model.mediation.breakdown.vio1, data = dfwide_mediation, std.lv = T, estimator = 'MLR', missing = 'ML', fixed.x = T)
model.mediation.breakdown.vio2.fit_MLR <- sem(model.mediation.breakdown.vio2, data = dfwide_mediation, std.lv = T, estimator = 'MLR', missing = 'ML', fixed.x = T)
model.mediation.breakdown.vio3.fit_MLR <- sem(model.mediation.breakdown.vio3, data = dfwide_mediation, std.lv = T, estimator = 'MLR', missing = 'ML', fixed.x = T)
model.mediation.breakdown.vio4.fit_MLR <- sem(model.mediation.breakdown.vio4, data = dfwide_mediation, std.lv = T, estimator = 'MLR', missing = 'ML', fixed.x = T)
model.mediation.breakdown.vio5.fit_MLR <- sem(model.mediation.breakdown.vio5, data = dfwide_mediation, std.lv = T, estimator = 'MLR', missing = 'ML', fixed.x = T)
model.mediation.breakdown.vio6.fit_MLR <- sem(model.mediation.breakdown.vio6, data = dfwide_mediation, std.lv = T, estimator = 'MLR', missing = 'ML', fixed.x = T)

summary(model.mediation.breakdown.vio1.fit)
summary(model.mediation.breakdown.vio1.fit_MLR)

summary(model.mediation.breakdown.vio2.fit)
summary(model.mediation.breakdown.vio2.fit_MLR)

summary(model.mediation.breakdown.vio3.fit)
summary(model.mediation.breakdown.vio3.fit_MLR)

summary(model.mediation.breakdown.vio4.fit)
summary(model.mediation.breakdown.vio4.fit_MLR)

summary(model.mediation.breakdown.vio5.fit)
summary(model.mediation.breakdown.vio5.fit_MLR)

summary(model.mediation.breakdown.vio6.fit)
summary(model.mediation.breakdown.vio6.fit_MLR)